

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 varColor;
uniform vec3 lightDir;

void main() {
    vec3 vertPos = mat3(ModelViewProjectionMatrix)*vertex;
    vec3 norm = normalize(mat3(NormalMatrix)*normal);
    float lambertian = max(dot(norm, lightDir), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-lightDir, norm);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 10.0);
    }
    vec3 ambientColor = vec3(0.1);
    vec3 diffuseColor = vec3(0.2,1.0,0.8);
    vec3 specularColor = vec3(1.0);
    varColor = vec3(ambientColor + lambertian * diffuseColor + specular * specularColor);
    //varColor= norm;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 varColor;
uniform vec3 lightDir;
void main() {
    
    gl_FragColor = vec4(varColor,1.0);
    if(lightDir.z>90.0){
        gl_FragColor = color;
    }
}`;